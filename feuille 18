print(base)
print(names(base))
base1<-base[,2:17]
dim(base)
summary(base)
colnames(base)<-colnames(base)[2:ncol(base)]
head(base)
base<-base[,-ncol(base)]
base
fix(base)
cor(DCO,NH4, method="pearson")
head(base)
summary(base)
# Box plot colored by groups: Species
library(ggpubr)
ggboxplot(base, x = "", y = "pH",
          color = "STATION", ylab = "pH", xlab = "STATION")
P13 <- ggboxplot(base$Ca, 
                ylab = "Ca", xlab = "STATIONS",
                add = "mean_sd",
                ggtheme = theme_minimal(),
                fill = "lightblue") 
base
P1
P2
P3
P4
P5
P6
P7
P8
P9
P10
P11
P12
P13
P14
P15
P16
P17
P18
summary(base)
grid.arrange(P1, P2, P3, P4, P5, P6, P7, P8, P9, P10 ,P11, P12, P13, ncol = 3)
grid.arrange(P7, P8, P9, P10 ,P11, P12, ncol = 3)
grid.arrange(P13, P14, P15, P16, P17,P18,  ncol = 3)

grid.arrange(DTP, RFP,ANNP, XGBP, KNNP, ncol=2)
base
grid.arrange(p, grid.raster(S))
###
install.packages("dplyr")
library(gtExtras)
base
base<-base[,1:14]
base %>%
  gt_plt_summary()
library(gt)
dim(base)
base
base %>%
  gt() %>%
  gt_summary()
library(gtsummary)
dim(base)
base
base2<-base[,2:10]
base %>%
  gt_plt_summary()
# Convertir base en tbl_df
base_tbl <- as_tibble(base)

# Créer un résumé de table avec tbl_summary
summary_tbl <- base_tbl %>%
  tbl_summary()

# Afficher la table résumée
summary_tbl



ggstripchart(base, x = "Cl", y = "CE",
             color = "Cl",
             add = "mean_sd")
ggplot(base, aes(VILLE, CE))+
  geom_point()+
  stat_ellipse()
# Ellipse by groups
p <- ggplot(base, aes(TAC, CE, color = CE))+
  geom_point()
p + stat_ellipse()
p
p <- ggplot(base, aes(TAC, CE))
P1 + geom_bin2d()
####MATRICE DE CORRELATION PAR GROUPE DELLA DATA###
library(GGally)
ggpairs(base)
ggpairs(base,upper = list(continuous = wrap("cor", size = 2.5)))
# Ajustement de la taille des étiquettes des coefficients de corrélation
ggpairs(base, aes(color = Type),
        upper = list(continuous = wrap("cor", size = 2)),  # Ajustement de la taille des étiquettes des coefficients de corrélation
        lower = list(continuous = "points"),
        diag = list(continuous = "densityDiag")
) +
  scale_colour_manual(values = c("darkorange","purple" )) 
ggpairs(base, aes(color=Type),        upper = list(continuous = wrap("cor", size = 2.5))) 
ggpairs(base, aes(color=Sample))+
  scale_colour_manual(values = c("darkorange","purple","cyan4",)) +
  scale_fill_manual(values = c("darkorange","purple","cyan4")) 
ggpairs(base,
    columns = 1:9,
aes(colour = Period),
lower = list(continuous = "smooth"),
upper = list(continuous = wrap("cor", method = "kendal", size = 2, conf.int=T, conf.int.level=0.95))
 )
dim(base)
head(base)
###matrice de correlation###
summary(base)
base
sd(base$`No3-`)
sd(base$DCO)
dim(base)
pairs(base) 
matrice.corr<-cor(base[,1:8], method="pearson")
matrice.corr
matrice.corr %>% network_plot(min_cor = 0.6)
ggcorrplot(matrice.corr,method = "circle", type = "lower",lab = TRUE, 
lab_size = 3, 
tl.cex = 10, 
colors = c("red", "white", "blue"),
title = "Matrice de corrélation des paramètres physico-chimiques")
p.mat <- cor_pmat(matrice.corr)
p.mat
ggcorrplot(matrice.corr,method = "square",
               type = "upper", p.mat = p.mat
)
P1+P2
corrplot(matrice.corr, method="number", type="upper", order="hclust", tl.col="black", tl.srt=45)
cor.mtest <- function(mat, ...) {
  mat <- as.matrix(mat)
  n <- ncol(mat)
  p.mat<- matrix(NA, n, n)
  diag(p.mat) <- 0
  for (i in 1:(n - 1)) {
    for (j in (i + 1):n) {
      tmp <- cor.test(mat[, i], mat[, j], ...)
      p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
    }
  }
  colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
  p.mat
}
# Matrice de p-value de la corrélation
p.mat <- cor.mtest(matrice.corr)
head(p.mat[, 1:19])
corrplot(matrice.corr, type="upper", order="hclust", method = "number",
         p.mat = p.mat, sig.level = 0.001)
corrplot(matrice.corr, type="upper", order="hclust", method="number",
         p.mat = p.mat, sig.level = 0.05, insig = "blank")
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(matrice.corr, method="color", col=col(200),  
         type="upper", order="hclust", 
         addCoef.col = "black", # Ajout du coefficient de corrélation
         tl.col="black", tl.srt=45, #Rotation des étiquettes de textes
         # Combiner avec le niveau de significativité
         p.mat = p.mat, sig.level = 0.01, insig = "blank", 
         # Cacher les coefficients de corrélation sur la diagonale
         diag=FALSE 
)
res.pca<-PCA(base,scale.unit = TRUE,ncp=5, graph = TRUE)
pearson
kendall
spearman
library(corrplot)
# Supposons que P100 est également une matrice de corrélation
par(mfrow = c(1, 2))

# Tracer le premier corrplot

corrplot(matrice.corr, type = "upper", order = "hclust", method = "circle", tl.cex = 0.7)

# Tracer le deuxième corrplot (suppose P100 est aussi une matrice de corrélation)
corrplot(matrice.corr, type = "lower", order = "hclust", method = "number", tl.cex = 0.7)

corrplot(matrice.corr, method="circle")
corrplot(matrice.corr, method="pie")
corrplot(matrice.corr, method="color")
corrplot(matrice.corr, method="number")
corrplot(matrice.corr, type="lower", order="hclust", method="number")
col<- colorRampPalette(c("red", "green", "blue"))(20)
corrplot(matrice.corr, type="upper", order="hclust", col=col)
corrplot(matrice.corr, type="upper", order="hclust", col=c("black", "white"),
         bg="lightblue")
corrplot(matrice.corr, method = "number", type = "upper", order = "hclust", addCoef.col = "black", number.digits = 2)

# Créer la partie inférieure avec la méthode "circle"

corrplot(matrice.corr, method = "circle", type = "lower", order = "hclust", addCoef.col = "black", number.digits = 2)

P100 <- corrplot(matrice.corr, type = "lower", order = "hclust", method = "number", tl.cex = 0.7)

# Ajouter la moitié supérieure avec des cercles
P101 <- corrplot(matrice.corr, type = "upper", order = "hclust", method = "circle", tl.cex = 0.7)
corrplot(matrice.corr, method = "pie", type = "lower", order = "hclust", addCoef.col = "black", number.digits = 2, col = "white")
library(PerformanceAnalytics)
chart.Correlation(matrice.corr, histogram=TRUE, pch=19)
dim(base)
base<-base[1:8,2:14]
###acp###
library(FactoMineR)
library(factoextra)
library(corrplot)
library(ggrepel)
dim(base)
fix(base)
base1<-base[,1:5]
variables<-base
variables <- base[, 1:8]
variables
distance_euclidienne <- dist(variables)
base
res.pca <- PCA(variables, graph = FALSE)
res.pca
fviz_eig(res.pca)
data("USArrests")
res.pca <- PCA(variables, graph = FALSE)

eig.val <- get_eigenvalue(res.pca)
eig.val
var <- get_pca_var(res.pca)
var
corrplot(var$contrib, is.corr=FALSE) 
var$contrib
weight<-var$contrib
weight
weight<-weight[,1]
weight
var$contrib

fviz_cos2(res.pca, choice = "var", axes = 1)
fviz_pca_biplot(res.pca, repel = TRUE, axes = c(1, 4))
fviz_pca_var(res.pca, repel = TRUE)
fviz_pca_(res.pca, repel = TRUE, axes = c(1, 2))

fviz_pca_biplot(res.pca, repel = TRUE,  quali.sup = 7, col.quanti.sup = "red",geom.ind = "point", # show points only (nbut not "text")
                palette = c("#00AFBB", "#FC4E07"),
                addEllipses = TRUE, # Concentration ellipseshttp://127.0.0.1:13139/graphics/2caddacc-7a82-4563-9abe-5a3921a41a09.png
                legend.title = "Groups")
fviz_pca_var(res.pca, col.var = "contrib",
             gradient.cols = c("#E7B800", "pink", "#FC4E07"), 
             repel = TRUE # Avoid text overlapping
)
fviz_pca_var(res.pca, col.var = "cos2",
             gradient.cols = c("#00AFBB", "#E7B800", "green"), 
             repel = TRUE, # Éviter le chevauchement du texte
             pointsize.var = 7 # Ajuster la taille des variables supplémentaires
)
fviz_pca_biplot(res.pca, col.var = "cos2",
             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), 
             repel = TRUE, 
             
)

fviz_pca_ind(res.pca, col.ind = "contrib",
             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), 
             repel = TRUE # Avoid text overlapping
)
###COLOR BY GROUPS##
print(names(base))
base<-base[,1:7]
res.pca <- PCA(base[,-14], graph = FALSE)
res.pca
fviz_pca(res.pca,
             geom.ind = "point", # show points only (nbut not "text")
             col.ind = base$Type    , # color by groups
             palette = c("#00AFBB", "#FC4E07"),
             addEllipses = TRUE, # Concentration ellipseshttp://127.0.0.1:13139/graphics/2caddacc-7a82-4563-9abe-5a3921a41a09.png
             legend.title = "GROUPS"
)
base
res.pca <- PCA(base[, -c(9, 7, 8)], graph = FALSE)

# Visualisation du PCA avec fviz_pca_ind
fviz_pca_biplot(res.pca,
             geom.ind = "point", # afficher uniquement les points
             col.ind = base$Exposure, # couleur par groupes
             palette = c("#00AFBB", "#FC4E07","green", "yellow", "pink", "orange", "#696969", "#216969"),
             legend.title = "Exposure",
             pointsize = 4, # taille des points
             labelsize = 4, # taille des étiquettes
             repel = TRUE # éviter le chevauchement des étiquettes
) 


xlim(-2.5, 4) +  # Définir les limites de l'axe des abscisses
ylim(-2.5, 5)    # Définir les limites de l'axe des ordonnées
###AJOUTER UN VARIABLE ##
res.pca <- PCA(base[,-c(8,9)], 
               quanti.sup = 7, graph=FALSE)
decathlon2.active <- decathlon2[1:23, 1:10]
head(decathlon2.active[, 1:6], 4)
fviz_pca_biplot(res.pca, repel = TRUE,
                col.var = "#2E9FDF", # Variables color
                col.ind = "#696969"  # Individuals color
)
PCA(variables, ind.sup = NULL, 
    quanti.sup = NULL, quali.sup = NULL, graph = TRUE)
dim(base)
base<-base[, 1:7]
res.pca <- PCA(base, 
               quanti.sup = 31:41, graph=FALSE)
fviz_pca_var(res.pca)
# Change color of variables
fviz_pca_var(res.pca,
             col.var = "black",     # Active variables
             col.quali.sup = "red" ,# Suppl. quantitative variables
            col.quanti.sup = "blue"
)
# Hide active variables on the plot, 
# show only supplementary variables
fviz_pca_var(res.pca, invisible = "var")
# Hide supplementary variables
fviz_pca_var(res.pca, invisible = "quali.sup")
res.pca$quali
fviz_pca_ind(res.pca, habillage = 2,
             addEllipses =TRUE, ellipse.type = "confidence",
             palette = "jco", repel = TRUE)
###PCA like NMDS###
library(ggplot2)
library(factoextra)  # Pour fviz_pca_biplot

# Supposons que vous avez déjà effectué la PCA et que res.pca est un data.frame avec les coordonnées PCA
# Exemple de transformation des résultats PCA en data.frame
pca_data <- as.data.frame(res.pca$ind$coord)  # Coordonnées des individus

# Ajouter les variables 'Exposure', 'Species', et 'Plots' au data.frame
pca_data$Exposure <- base$Exposure
pca_data$Species <- base$Species
pca_data$Plots <- base$Plots

ggplot(data = pca_data, aes(x = Dim.1, y = Dim.2, label = Plots)) +
  geom_point(aes(shape = Exposure, color = Species), size = 4) +
  scale_shape_manual(values = c(15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)) +
  scale_color_manual(values = c("#00AFBB", "#FC4E07", "green", "yellow", "pink", "orange", "#696969", "#216969")) +
  geom_text_repel() +  # Pour ajouter des labels aux points et éviter les chevauchements
  labs(x = "Dim1 (44.6%)", y = "Dim2 (32.1)") +
  theme_bw()
##ACP +les variables
res_pca <- PCA(data, graph = FALSE)
var_coord <- as.data.frame(res_pca$var$coord)
ggplot(data = pca_data, aes(x = Dim.1, y = Dim.2)) +
  geom_point(aes(shape = Exposure, color = Species), size = 4) +
  scale_shape_manual(values = c(15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)) +
  scale_color_manual(values = c("#00AFBB", "#FC4E07", "green", "yellow", "pink", "orange", "#696969", "#216969")) +
  geom_text_repel(aes(label = Plots)) +  # Vérifiez que "Plots" existe dans "pca_data"
  geom_segment(data = var_coord, aes(x = 0, y = 0, xend = Dim.1, yend = Dim.2),
               arrow = arrow(length = unit(0.3, "cm")), color = "blue", size = 1) +
  geom_text_repel(data = var_coord, aes(x = Dim.1, y = Dim.2, label = rownames(var_coord)),
                  color = "blue", size = 3) +
  labs(x = "Dim1 (44.6%)", y = "Dim2 (32.1%)") +
  theme_bw()

###AFC###
base<-read.csv2("C:/Users/moste/OneDrive/Bureau/MASTER2.csv",row.names = "Nom", check.names = F, header = T)
print(base)
dim(base)
base
base<-base[ ,1:16]
summary(base)
var(base$T)
sd(base$T)
res.ca <- CA(base, graph = FALSE)
fviz_ca_biplot(res.ca, repel = TRUE)

### Hierarchical K-Means Clustering ###
dim(base)
base1<-base[, 2:14]
df<- base
base1
library(factoextra)
res.hk <-hkmeans(df, 53)
# Elements returned by hkmeans()
names(res.hk)
res.hk
fviz_dend(res.hk, cex = 0.6, palette = "jco", 
          rect = TRUE, rect_border = "jco", rect_fill = TRUE)
fviz_cluster(res.hk, palette = "jco", repel = TRUE,
             ggtheme = theme_classic())
library(cluster)

# Vérifier la structure du dataframe
str(df)  # Vérifiez la structure de votre dataframe

# Standardiser les données si elles ne sont pas déjà normalisées
df_scaled <- scale(df)

# Calculer et visualiser le nombre optimal de clusters
set.seed(123)  # Pour la reproductibilité
fviz_nbclust(df_scaled, kmeans, method = "wss", k.max = 5) +
  geom_vline(xintercept = 3, linetype = 2) +  # Remplacez 4 par le nombre optimal de clusters déterminé
  labs(subtitle = "Optimal number of clusters")
###test of student###
library(ggpubr)
base
ggboxplot(base$EC, 
          ylab = "Weight (g)", xlab = FALSE,
          ggtheme = theme_minimal())
shapiro.test(base$EC)
ggqqplot(base$EC, ylab = "Men's weight",
         ggtheme = theme_minimal())
res <- t.test(base$CE, mu = 25)
# Printing the results
res 

###One-Sample Wilcoxon###
res <- wilcox.test(base$EC, mu = 25)
# Printing the results
res 
z<-base[,-2]
z
 
###box plot des donnée climatiques###    
base<-read.csv2("C:/Users/moste/OneDrive/Bureau/LAKOUK.csv")
base
ggboxplot(base, x = "LAND_USE", y = "OPI",
          color = "LAND_USE")
ggstripchart(base, x = "LAND_USE", y = "OPI",
             color = "LAND_USE",
             add = "mean_sd")

base
###anova###
library(tidyverse)
library(ggpubr)
library(rstatix)
print(names(base))
dim(base)
base<-base[,1:3]
head(base)
fix(base)
set.seed(1234)
base %>% sample_n_by(SAMPLE, size = 1)
levels(base$SAMPLE)
base <- base %>%
  reorder_levels(SAMPLE, order = c("litter", "Soil"))
base %>%
  group_by(land_use) %>%
  get_summary_stats(WA_WQI, type = "mean_sd")
ggboxplot(base, x = "SAMPLE", y = "VALUE")
base %>% 
  group_by("SAMPLE") %>%
  identify_outliers(VALUE)

# Construire le modèle linéaire
model  <- lm(VALUE ~ TECHNIQUE, data = base)
# Créer un QQ plot des résidus
ggqqplot(residuals(model))


# Calculer le test de normalité de Shapiro-Wilk
shapiro_test(residuals(model))

base %>%
  group_by(SAMPLE) %>%
  shapiro_test(VALUE)

shapiro.test(base$VALUE)

base %>% levene_test(HAUTEUR ~ PLACETTE)

res.aov <- base %>% anova_test(VALUE  ~ INDEX)
res.aov
base
###shaprio wilk###
library("ggpubr")
ggboxplot(base, x = "WQI", y = "land_use", 
          color = "land_use", palette = c("#00AFBB", "#E7B800", "#A3F100"),
          order = c("SEMI_urbain", "agriculture", "pastoral"),
          ylab = "WQI", xlab = "land_use")
kruskal.test(WQI ~ land_use, data = base)
res.kruskal <- base %>% kruskal_test(WQI ~ land_use)
res.kruskal
pwc <- base %>% 
  dunn_test(WQI ~ land_use, p.adjust.method = "bonferroni") 
pwc
pwc <- pwc %>% add_xy_position(x = "land_use")
ggboxplot(base, x = "land_use", y = "WQI")
ggboxplot(base, x = "land_use", y = "IPO") +
  labs(
    subtitle = get_test_label(res.kruskal, detailed = TRUE),
    caption = get_pwc_label(pwc)
  )
##Une ANOVA, à un facteur, significative est généralement suivie de tests post-hoc de Tukey pour effectuer de multiples comparaisons par paires entre les groupes. Fonction R clé: tukey_hsd()##
# Comparaisons par paires
pwc <- base %>% tukey_hsd(VALUE ~ INDEX)
pwc
print(pwc, n = 21)
pwc <- pwc %>% add_xy_position(x = "INDEX")
ggboxplot(base , x = "INDEX", color = "INDEX", palette = c("#00AFBB", "#E7B800", "#A3F100", "red", "yellow", "orange"),
, y = "VALUE", ylab = "VALUE", xlab = "INDEX") +
  stat_pvalue_manual(pwc, hide.ns = TRUE) +
  labs(
    subtitle = get_test_label(res.aov, detailed = TRUE),
    caption = get_pwc_label(pwc)
  )
ggboxplot(base, x = "INDEX", color = "INDEX", 
          palette = c("#00AFBB", "#E7B800", "#A3F100", "red", "yellow", "orange"),
          y = "VALUE", ylab = "VALUE", xlab = "INDEX") +
  stat_summary(fun = mean, geom = "point", shape = 16, size = 1, color = "black", 
               position = position_dodge(width = 0.75)) +  
  stat_pvalue_manual(pwc, hide.ns = TRUE) +
  labs(
    subtitle = get_test_label(res.aov, detailed = TRUE),
    caption = get_pwc_label(pwc)
  )
### anova two way sthda###
ggboxplot(base, x = "TOURBE", y = "LGs", color = "SITE",
          palette = c("#00AFBB", "#E7B540"))
library(ggplot2)

# Convertir la variable "concentration" en facteur
base1$CONCENTRATION <- factor(base1$concentration)

# Utiliser ggplo t avec l'esthétique de groupe spécifié
ggboxplot(base, x = "TECHNIQUE", y = "CONCENTRATION", color = "EXTRAIT", palette = c("#00AFBB", "#E7B540", "#E7E100"), add = "jitter", facet.by = "CONCENTRATION")
ggline(base, x = "EXTRAIT", y = "CONCENTRATION", color = "TECHNIQUE",
       add = c("mean_se", "dotplot"),
       palette = c("#00AFBB", "#E7B540", "#E7E100"))
interaction.plot(x.factor = data$EXTRAIT, trace.factor = data$CONCENTRATION, 
                 response = data$TECHNIQUE, fun = mean, 
                 type = "b", legend = TRUE, 
                 xlab = "EXTRAIT", ylab="CONCENTRATION",
                 pch=c(1,19), col = c("#00AFBB", "#E7B540", "#E7E100"))
res.aov2 <- aov(CONCENTRATION ~ TECHNIQUE + EXTRAIT, data = base)
summary(res.aov2)
res.aov3 <- aov(CONCENTRATION ~ TECHNIQUE * EXTRAIT, data = base)
res.aov3 <- aov(CONCENTRATION ~ TECHNIQUE + EXTRAIT + TECHNIQUE:EXTRAIT, data = base)
summary(res.aov3)
boxplot(CONCENTRATION ~ EXTRAIT * TECHNIQUE, data=base, frame = FALSE, 
        col = c("#00AFBB", "#E7B540", "#E7E100"), ylab="CONCENTRATION") 

fix(base)
# Spécifier le nombre de colonnes dans le fichier
data2 <- read.table("C:/Users/moste/Downloads/marktable11-2.txt", header = TRUE)

# Afficher les premières lignes des données importées
head(data2)
print(data)
fix(data)
print(data)
dim(data)
data1<-data[2:345,]
data1
dim(base)
data<-base[,1:22]
data
###anova two way datanovia ###
data("jobsatisfaction", package = "datarium")
base %>%
  group_by(STATION, WQI) %>%
  get_summary_stats(IPO, type = "mean_sd")
bxp <- ggboxplot(
  base, x = "STATION", y = "IPO",
  color = "WQI", palette = "jco"
)
bxp
###VALEURS ABERANTES###
base %>%
  group_by(EXTRAIT, TECHNIQUE) %>%
  identify_outliers(CONCENTRATION)
model  <- lm(CONCENTRATION ~ EXTRAIT*TECHNIQUE,
             data = base)
# Créer un QQ plot des résidus
ggqqplot(residuals(model))
shapiro_test(residuals(model))
base %>%
  group_by(EXTRAIT, TECHNIQUE) %>%
  shapiro_test(CONCENTRATION)
ggqqplot(base, "CONCENTRATION", ggtheme = theme_bw()) +
  facet_grid(EXTRAIT ~ TECHNIQUE)
###test de levene#
base %>% levene_test(CONCENTRATION ~ EXTRAIT*TECHNIQUE)
res.aov <- base %>% anova_test(CONCENTRATION ~ EXTRAIT * TECHNIQUE)
res.aov
##TESTS POST HOCS##
model <- lm(CONCENTRATION ~ EXTRAIT * TECHNIQUE, data = base)
base %>%
  group_by(EXTRAIT) %>%
  anova_test(CONCENTRATION ~ TECHNIQUE, error = model)
# comparaisons par paires
library(emmeans)
pwc <- base %>% 
  group_by(EXTRAIT) %>%
  emmeans_test(CONCENTRATION ~ TECHNIQUE, p.adjust.method = "bonferroni") 
pwc
res.aov
##Visualisation : Boxplots avec p-values##
pwc <- pwc %>% add_xy_position(x = "TECHNIQUE")
bxp +
  stat_pvalue_manual(pwc) +
  labs(
    subtitle = get_test_label(res.aov, detailed = TRUE),
    caption = get_pwc_label(pwc)
  )
###test du student test de T###
base
base %>%
  group_by(TECHNIQUE) %>%
  get_summary_stats(CONCENTRATION, type = "mean_sd")
bxp <- ggpaired(base, x = "TECHNIQUE", y = "CONCENTRATION", 
                order = c("Utrason", "Maceration"),
                ylab = "CONCENTRATION", xlab = "TEHCHNIQUE")
bxp
stat.test <- base  %>% 
  t_test(CONCENTRATION ~ TECHNIQUE, paired = TRUE) %>%
  add_significance()
stat.test

stat.test <- stat.test %>% add_xy_position(x = "TECHNIQUE")
bxp + 
  stat_pvalue_manual(stat.test, tip.length = 0) +
  labs(subtitle = get_test_label(stat.test, detailed= TRUE))
###WILCOXON###
library(tidyverse)
library(rstatix)
library(ggpubr)
base %>%
  group_by(SAMPLE) %>%
  get_summary_stats(VALUE, type = "median_iqr")
bxp <- ggpaired(base, x = "SAMPLE", y = "VALUE", 
                order = c("litter", "Soil"),
                ylab = "VALUE", xlab = "SAMPLE")
bxp
bxp<-ggboxplot(base, x = "SAMPLE", y = "VALUE", 
               color = "PARAMETRE", palette = c("#00AFBB", "#E7B800","green",'yellow',"red", "pink", "orange","blue","#B7B300", "#17B500","#F7C900","#00CFAB", "#21AFBB"),
               order = c("litter", "Soil"),
               ylab = "VALUE", xlab = "SAMPLE")
stat.test <- base  %>%
  wilcox_test(VALUE ~ SAMPLE, paired = TRUE) %>%
  add_significance()
stat.test
stat.test <- stat.test %>% add_xy_position(x = "SAMPLE")
bxp + 
  stat_pvalue_manual(stat.test, tip.length = 0) +
  labs(subtitle = get_test_label(stat.test, detailed= TRUE))

####MANOVA####
base<-base[1:6,]
base
iris2 <- base %>%
  select(WQI, IPO, STATION) %>%
  add_column(id = 1:nrow(base), .before = 1)
head(iris2)
ggboxplot(
  base, x = "STATION", y = c("IPO", "WQI"), 
  merge = TRUE, palette = "jco"
)
###manova data novia###
library(tidyverse)
library(ggpubr)
library(rstatix)
library(car)
library(broom)
base <- base %>%
  select(HG, CC,GL, Bp, Dp, d, e, Bd, Dd, Bp/GL, d/GL, e/GL, GLT, BpT, DpT, dT, eT, BdT, DdT, `BpT/GLT, dT/GLT, eT/GLT, AGE) %>%
  add_column(id = 1:nrow(base), .before = 1)
print(names(base))
ggboxplot(
  base, x = "AGE", y = c("HG", "CC","GL", "Bp", "Dp", "d", "e", "Bd", "Dd", "Bp/GL", "d/GL", "e/GL", "GLT", "BpT", "DpT", "dT", "eT", "BdT", "DdT", "BpT/GLT", "dT/GLT", "eT/GLT"), 
  merge = TRUE, palette = "jco"
)+
  scale_y_continuous(breaks = c(5,10,20,35, 50, 100, 150))+
  coord_trans(y="log")+
  theme(legend.position = "none")+
  ggtitle("avec la fonction coord_trans()")
base %>%
  group_by(AGE) %>%
  get_summary_stats(HG, CC,GL, Bp, Dp, d, e, Bd, Dd, Bp/GL, d/GL, e/GL, GLT, BpT, DpT, dT, eT, BdT, DdT, BpT/GLT, dT/GLT, eT/GLT, type = "mean_sd")
base %>%
  group_by(AGE) %>%
  shapiro_test(HG, CC,GL, Bp, Dp, d, e, Bd, Dd, Bp/GL, d/GL, e/GL, GLT, BpT, DpT, dT, eT, BdT, DdT, BpT/GLT, dT/GLT, eT/GLT) %>%
  arrange(variable)
base %>%
  select(HG, CC,GL, Bp, Dp, d, e, Bd, Dd, Bp/GL, d/GL, e/GL, GLT, BpT, DpT, dT, eT, BdT, DdT, BpT/GLT, dT/GLT, eT/GLT) %>%
  mshapiro_test()
